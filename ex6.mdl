//
//  Exercise 3: Elements in a Turbojet Model
//


// declare the thermodynamics package to be used
setThermoPackage( "GasTbl" );


// instantiate the Elements in this model
// syntax is: 
// Element elementType elementName { }

Element FlightConditions ambient {
	alt = 10000;
	MN = 0.40;
	W = 100;
} 


Element Inlet inlet { 
	eRamBase = 0.98;
} 


Element Compressor HPC { 
	PRdes = 20;
	effDes = 0.90; 
} 


Element FuelStart fuelIn { 
	LHV = 18500;
} 


Element Burner burner {
	switchBurn = "FAR"; 
	FAR = 0.030;
} 


Element Turbine HPT { 
	PRbase = 4;
	eff = 0.90; 
} 


Element Nozzle nozzle { 
   switchType = "CONIC";
   PsExhName = "ambient.Ps"; 
} 


Element FlowEnd end { 
} 


Element Shaft shaft { 
   ShaftInputPort HPClink;
   ShaftInputPort HPTlink;
   Nmech = 5000;
} 


// link the Elements together via their Ports
linkPorts( "ambient.Fl_O", "inlet.Fl_I",    "station0"  );
linkPorts( "inlet.Fl_O",   "HPC.Fl_I",      "station2"  );
linkPorts( "HPC.Fl_O",     "burner.Fl_I",   "station3"  );
linkPorts( "fuelIn.Fu_O",  "burner.Fu_I",   "stationF"  );
linkPorts( "burner.Fl_O",  "HPT.Fl_I",      "station4"  );
linkPorts( "HPT.Fl_O",     "nozzle.Fl_I",   "station5"  );
linkPorts( "nozzle.Fl_O",  "end.Fl_I",      "station9"  );

linkPorts( "HPC.Sh_O",     "shaft.HPClink", "HPCwork"   );
linkPorts( "HPT.Sh_O",     "shaft.HPTlink", "HPTwork"   );


// print a "done" statement
cout << "done parsing the model \n";


//#include <EX5.view_page> // What is the purpose of this?
OutFileStream myoutStream {
	filename = "myfile.out";
	}
	
DataViewer PageViewer myView {
	
	LinkColTBlock mystation {
		compType = "FluidInputPort";
		compAttr = {"W:????.??=massflow", "Pt:???.???", "Tt:????.??"}
		}
	
	SimpleBlock mydata {
		body = "   MN = ?.??  altitude = ?????.? ft   Net Thrust = ?????.? lb fuel flow = ??????.? lbm/hr";
		vars = {"ambient.MN", "ambient.alt", "nozzle.Fg-inlet.Fram", "burner.Wfuel * 3600." }
		}
		
	anchor = "mydata";
	mydata.bottom = "mystation";
	
	outStreamHandle = "myoutStream";
}

	
Independent ind_HPTpr { 
	varName = "HPT.PRbase";
} 

Dependent dep_HPbalance { 
	eq_lhs = "-HPC.pwr";
	eq_rhs = "HPT.pwr";
} 

// set the model to DESIGN mode to run the turbojet DESIGN point
setOption( "switchDes", "DESIGN" ); // ????


// execute the DESIGN point
run();
myView.display(); //????

// output some variables of interest
cout << "turbojet gross thrust = " << nozzle.Fg << " " << nozzle.Fg.units << endl;
cout << "turbojet ram drag     = " << inlet.Fram << " " << inlet.Fram.units << endl;
cout << "turbojet net thrust = " << nozzle.Fg - inlet.Fram << " " << nozzle.Fg.units << endl;
cout << "turbojet fuel flow = " << burner.Wfuel << " " << burner.Wfuel.units << endl;
cout << "burner exit temperature = " << burner.Fl_O.Tt << " " << burner.Fl_O.Tt.units << endl;
cout << "compressor power = " << HPC.pwr << " " << HPC.pwr.units << endl;
cout << "turbine power = " << HPT.pwr << " " << HPT.pwr.units << endl;
cout << endl;